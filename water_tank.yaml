esphome:
  name: "retencni-nadrz"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid_2
      password: !secret wifi_password_2
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Retencni_nadrz"
    password: "Retencni_nadrz1"

captive_portal:

## Sensor 1 ###############################

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO25
    echo_pin: GPIO26
    name: "Water Tank Level"
    timeout: 4.0m
    unit_of_measurement: "cm"
    update_interval: 1s
#    filters:
# TD = max depth/range 192cm = 0%
# EX = excluded depth/range (from sensor to max water level) 50cm = 100%
    filters:
              # return ((((x*100)-EX)-(TD-EX))/(TD-EX))*-100
      - lambda: return ((((x*100)-50)-(192-50))/(192-50))*-100;
      - filter_out: nan

## Sensor 2 ###############################      
  - platform: ultrasonic
    trigger_pin: GPIO25
    echo_pin: GPIO26
    #update_interval: 1s
    name: "Water Tank Capacity"
    timeout: 4.0m
    unit_of_measurement: "l"
    update_interval: 1s
    accuracy_decimals: 0

# TC = Tank Capacity in liters = 1737    
    filters:
              # return ((((x*100)-EX)-(TD-EX))/(TD-EX))*-TC
      - lambda: return ((((x*100)-50)-(192-50))/(192-50))*-1737;
      - filter_out: nan

## Deep Sleep ###############################
# Not needed if run on constant power supply
#deep_sleep:
#  id: deep_sleep_control
#  run_duration: 10s
#  sleep_duration: 1min
#
#binary_sensor:
#  - platform: homeassistant
#    id: prevent_deep_sleep
#    entity_id: input_boolean.prevent_deep_sleep
#
#script:
#  - id: consider_deep_sleep
#    mode: queued
#    then:
#      - delay: 10s
#      - if:
#          condition:
#            binary_sensor.is_on: prevent_deep_sleep
#          then:
#            - logger.log: 'Skipping sleep, per prevent_deep_sleep'
#          else:
#            - deep_sleep.enter: deep_sleep_control
#      - script.execute: consider_deep_sleep